(define $list-equal?
  (lambda [$val $tgt]
    (match [val tgt] [(List Bool+) (List Bool+)]
	  {[[$x ,x] #t]
	   [[<cons $x $xs> <cons (? equal? x) (? list-equal? xs)>] #t]
	   [[_ _] #f]})))

(define $Bool+
  (type
    {[,$val []
      {[$tgt (if (eq? val tgt)
                 {[]}
                 {})]}]
     [<true> []
      {[<true> {[]}]
       [#t {[]}]
       [_ {}]}]
     [<false> []
      {[<false> {[]}]
       [#f {[]}]
       [_ {}]}]
     [<dontcare> []
      {[<d> {[]}]
       [_ {}]}]
     [_ [Something]
      {[$tgt {tgt}]}]
     }))

(define $equal?
  (lambda [$val $tgt]
    (match [val tgt] [Bool+ Bool+]
      {[[$x ,x] #t]
       [[_ <dontcare>] #t]
       [[_ _] #f]})))

(define $findPrimeImplicant
  (lambda [$as]
    (let {[$rs
           ((unique (List Bool+))
                   (match-all as (Multiset (List Bool+))
                     [<cons <join $xs <cons ,#f $zs>> <cons ,{@xs #t @zs} _>> {@xs <d> @zs}]))]}
      (match rs (List Something)
		{[<nil> as]
		 [_ {@(findPrimeImplicant rs) @(remove-collection-equal? as rs)}]}))))

(define $remove-all-equal?
  (lambda [$xs $x]
    ((remove-collection (List Bool+)) xs (filter (lambda [$y] (list-equal? y x)) xs))))

(define $remove-collection-equal?
  (lambda [$xs $ys]
    (match ys (List Something)
      {[<nil> xs]
       [<cons $y $rs> (remove-collection-equal? (remove-all-equal? xs y) rs)]})))

(define $findMinimumCover
  (lambda [$aSet $bSet $upper $uSet]
    (match [aSet bSet] [(Multiset (List Bool+)) (Multiset (List Bool+))]
	  {[(& [_ <join (& ^(loop $l $i (between 2 upper) <cons _ l> <cons _ _>) $xs) $ys>]
		   ^[<cons $z _> <join ^<cons (? list-equal? z) _> ,ys>])
		(findMinimumCover aSet bSet (size xs) xs)]
	   [_ uSet]})))

(define $findMinimization
  (lambda [$aSet $bSet]
    (match [aSet bSet] [(Multiset (List Bool+)) (Multiset (List Bool+))]
      {[[<nil> _] {}]
       [[<cons $x $xs> <cons (& (? list-equal? x) $y) (& ^<cons (? list-equal? x) _> $zs)>]
        {y @(findMinimization (remove-all-equal? xs y) zs)}]
       [_ (findMinimumCover aSet bSet (size bSet) bSet)]})))

(define $QM
  (lambda [$aSet]
    (findMinimization aSet (findPrimeImplicant aSet))))

(define $main
  (lambda [$world $argv]
    (match argv (List Something)
      {[<cons $i <cons $o _>>
        (do {[[$world $p] (open-input-file world i)]
             [[$world $val] (read-from-port world p)]
             [$world (close-input-port world p)]
             [[$world $p] (open-output-file world o)]
             [$world (write-to-port world p (QM val))]
             [$world (close-output-port world p)]}
            world)]
       [<cons $i _>
        (do {[[$world $p] (open-input-file world i)]
             [[$world $val] (read-from-port world p)]
             [$world (close-input-port world p)]
             [$world (write-string world "output : ")]
             [$world (flush world)]
             [$world (write world (QM val))]
             [$world (write-char world '\n')]
             [$world (flush world)]}
            world)]
        [_
         (do {[$world (write-string world "input : ")]
              [$world (flush world)]
              [[$world $val] (read world )]
              [$world (write-string world "output : ")]
              [$world (flush world)]
              [$world (write world (QM val))]
              [$world (write-char world '\n')]}
             world)]})))
