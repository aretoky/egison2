(test (match-all {1 2 3} (List Integer)
        [<cons $x $ts> [x ts]]))
{[1 {2 3}]}

(test (match-all {1 2 3} (Multiset Integer)
        [<cons $x $ts> [x ts]]))
{[1 {2 3}] [2 {1 3}] [3 {1 2}]}

(test (match-all {1 2 3} (Set Integer)
        [<cons $x $ts> [x ts]]))
{[1 {2 3}] [2 {1 3}] [3 {1 2}] [1 {2 3 1}] [2 {1 3 2}] [3 {1 2 3}]}


(test (match-all {1 2 3} (List Integer)
        [<join $xs $ys> [xs ys]]))
{[{} {1 2 3}] [{1} {2 3}] [{1 2} {3}] [{1 2 3} {}]}

(test (match-all {1 2 3} (Multiset Integer)
        [<join $xs $ys> [xs ys]]))
{[{} {1 2 3}] [{3} {1 2}] [{2} {1 3}] [{2 3} {1}] [{1} {2 3}] [{1 3} {2}] [{1 2} {3}] [{1 2 3} {}]}

(test (match-all {1 2 3} (Set Integer)
        [<join $xs $ys> [xs ys]]))
{[{} {1 2 3}] [{3} {1 2}] [{3} {1 2 3}] [{2} {1 3}] [{2} {1 3 2}] [{2 3} {1}] [{2 3} {1 3}] [{2 3} {1 2}] [{2 3} {1 2 3}] [{1} {2 3}] [{1} {2 3 1}] [{1 3} {2}] [{1 3} {2 3}] [{1 3} {2 1}] [{1 3} {2 1 3}] [{1 2} {3}] [{1 2} {3 2}] [{1 2} {3 1}] [{1 2} {3 1 2}] [{1 2 3} {}] [{1 2 3} {3}] [{1 2 3} {2}] [{1 2 3} {2 3}] [{1 2 3} {1}] [{1 2 3} {1 3}] [{1 2 3} {1 2}] [{1 2 3} {1 2 3}]}


(test (match-all {1 2 3} (List Integer)
        [<snoc $x $ts> [x ts]]))
{[3 {1 2}]}

(test (match-all {1 2 3} (List Integer)
        [<nioj $hs $ts> [hs ts]]))
{[{} {1 2 3}] [{3} {1 2}] [{2 3} {1}] [{1 2 3} {}]}


(test (match-all {1 2 3 4 5} (List Integer)
        [<join _ <cons $x <join _ <cons $y _>>>> [x y]]))
{[1 2] [1 3] [1 4] [1 5] [2 3] [2 4] [2 5] [3 4] [3 5] [4 5]}

(test (match-all {1 2 3 4 5} (List Integer)
        [<join _ <cons $x <join _ <cons $y <join _ <cons $z _>>>>>> [x y z]]))
{[1 2 3] [1 2 4] [1 2 5] [1 3 4] [1 3 5] [1 4 5] [2 3 4] [2 3 5] [2 4 5] [3 4 5]}


(test (match-all {2 8 7 2 7} (Multiset Integer)
        [<cons $m <cons ,m _>> m]))
{2 7}

(test (match {5 2 1 3 4} (Multiset Integer)
        {[<cons $n
           <cons ,(- n 1)
            <cons ,(- n 2)
             <cons ,(- n 3)
              <cons ,(- n 4)
               <nil>>>>>>
          <ok>]
         [_ <ko>]}))
<ok>

(test (match {2 7 7 2 7} (Multiset Integer)
        {[<cons $m
           <cons ,m
            <cons ,m
             <cons $n
              !<cons ,n
                !<nil>>>>>>
          <ok>]
         [_ <ko>]}))
<ok>

(test (match-all {{1 2 3 4 5} {4 5 1} {6 1 7 4}}
        (List (Multiset Integer))
        [<cons <cons $n _>
          <cons <cons ,n _>
           <cons <cons ,n _>
            <nil>>>>
         n]))
{1 4}


(test (loop $l $i (between 1 3) {i @l} {}))
{1 2 3}

(test (match-all {1 2 3 4 5} (Multiset Integer)
        [(loop $l $i (between 1 2) <cons $a_i <cons (& $a_(+ i 1) ,(+ a_i 1)) l>> _)
         (loop $l $i (between 1 2) {a_i @l} {})]))
{[1 3] [1 4] [2 4] [3 1] [4 1] [4 2]}

(test (match-all {1 2 3 4 5} (List Integer)
        [(loop $l $i (between 1 3) <join _ <cons $a_i l>> _)
         (loop $l $i (between 1 3) {a_i @l} {})]))
{[1 2 3] [1 2 4] [1 2 5] [1 3 4] [1 3 5] [1 4 5] [2 3 4] [2 3 5] [2 4 5] [3 4 5]}

(define $combination
  (lambda [$xs $k]
    (match-all xs (List Something)
      [(loop $l $i (between 1 k) <join _ <cons $a_i l>> _)
       (loop $l $i (between 1 k) {a_i @l} {})])))


(test (combination {1 2 3 4 5} 3))
{[1 2 3] [1 2 4] [1 2 5] [1 3 4] [1 3 5] [1 4 5] [2 3 4] [2 3 5] [2 4 5] [3 4 5]}

(test (combination {1 2 3 4 5 6 7 8} 2))
{[1 2] [1 3] [1 4] [1 5] [1 6] [1 7] [1 8] [2 3] [2 4] [2 5] [2 6] [2 7] [2 8] [3 4] [3 5] [3 6] [3 7] [3 8] [4 5] [4 6] [4 7] [4 8] [5 6] [5 7] [5 8] [6 7] [6 8] [7 8]}
