(define $combination
  (lambda [$xs $k]
    (match k Nat
      {[<o> {{}}]
       [<s $k1>
        (concat (match-all xs (List Something)
                  [<join _ <cons $x $rs>>
                   (map (lambda [$ys]
                          {x @ys})
                        (combination rs k1))]))]})))

(test (combination {1 2 3 4 5} 3))


(define $Stick
  (lambda [$a]
    (type
      {[,$val []
	{[$tgt (if (or ((= (List a)) val tgt)
		       ((= (List a)) val (reverse tgt)))
		   {[]}
		   {})]}]
       [<nil> []
        {[$tgt (match-all tgt (List a) [<nil> []])]}]
       [<cons _ _> [a (List a)]
        {[$tgt {@(match-all tgt (List a) [<cons $x $xs> [x xs]])
                @(match-all (reverse tgt) (List a) [<cons $x $xs> [x xs]])}]}]
       [<join _ _> [(List a) (List a)]
        {[$tgt {@(match-all tgt (List a) [<join $xs $ys> [xs ys]])
                @(match-all (reverse tgt) (List a) [<join $xs $ys> [xs ys]])}]}]
       [_ [Something]
	{[$tgt {tgt}]}]
       })))

(test (match-all {1 2 3} (Stick Integer) [<cons $x $xs> [x xs]]))
(test (match-all {1 2 3} (Stick Integer) [<join $xs $ys> [xs ys]]))
(test (match-all {1 2 3 4} (Stick Integer) [<join $xs <cons $w $ys>> [xs w ys]]))
(test (match-all {1 2 3} (Stick Integer) [,{3 2 1} <ok>]))


(define $eight-queen
  (match-all {1 2 3 4 5 6 7 8} (Multiset Integer)
    [<cons $a_1
      <cons (& ^,(- a_1 1)
               ^,(+ a_1 1)
               $a_2)
       <cons (& ^,(- a_1 2)
                ^,(- a_2 1)
                ^,(+ a_1 2)
                ^,(+ a_2 1)
                $a_3)
        <cons (& ^,(- a_1 3)
                 ^,(- a_2 2)
                 ^,(- a_3 1)
                 ^,(+ a_1 3)
                 ^,(+ a_2 2)
                 ^,(+ a_3 1)
                 $a_4)
          <cons (& ^,(- a_1 4)
                   ^,(- a_2 3)
                   ^,(- a_3 2)
                   ^,(- a_4 1)
                   ^,(+ a_1 4)
                   ^,(+ a_2 3)
                   ^,(+ a_3 2)
                   ^,(+ a_4 1)
                   $a_5)
           <cons (& ^,(- a_1 5)
                    ^,(- a_2 4)
                    ^,(- a_3 3)
                    ^,(- a_4 2)
                    ^,(- a_5 1)
                     ^,(+ a_1 5)
                     ^,(+ a_2 4)
                     ^,(+ a_3 3)
                     ^,(+ a_4 2)
                     ^,(+ a_5 1)
                    $a_6)
            <cons (& ^,(- a_1 6)
                     ^,(- a_2 5)
                     ^,(- a_3 4)
                     ^,(- a_4 3)
                     ^,(- a_5 2)
                     ^,(- a_6 1)
                     ^,(+ a_1 6)
                     ^,(+ a_2 5)
                     ^,(+ a_3 4)
                     ^,(+ a_4 3)
                     ^,(+ a_5 2)
                     ^,(+ a_6 1)
                     $a_7)
             <cons (& ^,(- a_1 7)
                      ^,(- a_2 6)
                      ^,(- a_3 5)
                      ^,(- a_4 4)
                      ^,(- a_5 3)
                      ^,(- a_6 2)
                      ^,(- a_7 1)
                      ^,(+ a_1 7)
                      ^,(+ a_2 6)
                      ^,(+ a_3 5)
                      ^,(+ a_4 4)
                      ^,(+ a_5 3)
                      ^,(+ a_6 2)
                      ^,(+ a_7 1)
                      $a_8)
              <nil>>>>>>>>>
     [a_1 a_2 a_3 a_4 a_5 a_6 a_7 a_8]]))
