;; Bool
(test (match #t Bool
        {[<true> <ok>]
         [_ <ko>]}))
(test <ok>)

(test (match #f Bool
        {[<false> <ok>]
         [_ <ko>]}))
(test <ok>)

(test (if (and ((match? Bool) #t #t)
               (and ((match? Bool) #f #f)
                    (not (or ((match? Bool) #t #f)
                             ((match? Bool) #f #t)))))
          <ok>
          <ko>))
(test <ok>)

;; If
(test (if #t 1 2))
(test 1)

(test (if #f 1 2))
(test 2)

;; let
(test (let {[$t [1 2]]}
        (let {[[$x $y] t]} (+ x y))))
(test 3)

;; Mutual recursion
(test (letrec {[$f (lambda [$x] (+ (g x) 10))]
               [$g (lambda [$x] (+ x 1))]}
        (f 0)))
(test 11)

;; Something
(test (if ((= (List Integer)) (match-all 1 Something [$x x])
                              {1})
          <ok>
          <ko>))
(test <ok>)
          

;; Order
(test (match <less> Order {[<less> <ok>]
                           [_ <ko>]}))
(test <ok>)

;; Value pattern
(test (match <less> Order {[,<less> <ok>]
                           [_ <ko>]}))
(test <ok>)

;; Loop
(test (loop $l $i {1 2 3} {i @l} {}))
(test {1 2 3})
      