<source-file> ::= <EOF> | <top-exp> <source-file>

<top-exp> ::= <test-exp> | <define-exp> | <load-exp> | <load-file-exp> | <execute-exp>

<test-exp> ::= "(" "test" <egison-exp> ")"
<define-exp> ::= "(" "define" <assign-var> <egison-exp> ")"
<load-exp> ::= "(" "load" <string> ")"
<load-file-exp> ::= "(" "load-file" <string> ")"
<excecute-exp> ::= "(" "execute" <egison-exp>* ")"

<comment> ::= ";" <character>* <newline> | "#|" <comment-contents> "|#"
<comment-contents> ::= <string-do-not-contain-neither-#|-nor-|#>
                     | <comment-contents> "#|" <comment-contents>> "|#" <comment-contents>

<assign-var> ::= "$" <identifier>
<macro-var> ::= "%" <identifier>
<identifier> ::= <fstname> <sndname>*
<fstname> ::= <alphabet> | <fstsymbol>
<fstsymbol> ::= "&" | "*" | "+" | "-" | "/" | ":" | "="
<sndname> ::= <fstname> | <digit> | <sndsymbol>
<sndsymbol> ::= "?" | "!"


<egison-exp> ::= <builtin-data>
               | <identifier>
               | <assign-var>
               | <macro-var>
               | "$`" <identifier>
               | "`" <identifier>
               | <collection-exp>
               | <tuple-exp>
               | <array-exp>
               | <generate-array-exp>
               | <pattern-exp>
               | <lambda-exp>
               | <match-exp>
               | <match-all-exp>
               | <let-exp>
               | <do-exp>
               | <letrec-exp>
               | <if-exp>
               | <loop-exp>
               | <type-exp>
               | <macro-exp>
               | "Something"
               | "undefined"

<builtin-data> ::= <integer> | <float> | <bool> | <char> | <string>

<char> ::= "'" <character> "'"
<string> ::= "\"" <character>* "\""

<match-exp> ::= "(" "match" <egison-exp> <egison-exp> <match-clauses> ")"
<match-all-exp> ::= "(" "match-all" <egison-exp> <egison-exp> <match-clause> ")"
<let-exp> ::= "(" "let" <match-clauses>  <egison-exp> ")"
<do-exp> ::= "(" "do" <match-clauses> <egison-exp> ")"
<letrec-exp> ::= "(" "letrec" <match-clauses> <egison-exp> ")"
<if-exp> ::= "(" "if" <egison-exp> <egison-exp> <egison-exp> ")"
<loop-exp> ::= "(" "loop" <assign-var> <assign-var> <egison-exp> <egison-exp> <egison-exp> ")"
<macro-exp> ::= "(" "macro" "[" <assign-var>* "]" <egison-exp> ")"
<type-exp> ::= "(" "type" <type-def-clauses> ")"

<match-clauses> ::= "{" <match-clause>+ "}"
<match-clause> ::= "[" <egison-exp> <egison-exp> "]"

<type-def-clauses> ::= "{" <type-def-clause>+ "}"
<type-def-clause> ::= "[" <primitive-pat-pat> <egison-exp> <primitive-pat-clauses> "]"

<primitive-pat-clauses> ::= "{" <primitive-pat-clause>+ "}"
<primitive-pat-clause> ::= "[" <primitive-pat> <egison-exp> "]"

<primitive-pat-pat> ::= "_"
                      | "," <assign-var>
                      | "<" <identifier> <primitive-pat-pat>* ">"

<collection-exp> ::= "{" <contents-exp>* "}"
<contents-exp> ::= <egison-exp> | "@" <egison-exp>
<tuple-exp> ::= "[" <egison-exp>* "]"
<generate-array-exp> ::= "(" "generate-array" <egison-exp> <egison-exp> ")"

<array-exp> ::= "[|" <array-row_0> "|]"
<array-row_n> ::= <egison-exp>* | ("[~" <array-row_(n+1)> "~]")*

<pattern-exp> ::= "_" | <base-pat> | <value-pat> | <cut-pat> | <and-pat> | <or-pat> | <not-pat> 
<base-pat> ::= "<" <identifier> <egison-exp>* ">"
<value-pat> ::= "," <egison-exp>
<cut-pat> ::= "!" <egison-exp>
<and-pat> ::= "(" "&" <egison-exp>+ ")"
<or-pat> ::= "(" "|" <egison-exp>+ ")"
<not-pat> ::= "^" <egison-exp>