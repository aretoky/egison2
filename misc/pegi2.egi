;;simple PEG parser

;; convert character pattern to string pattern
(define $char-str (lambda [$char-pat] (lambda [$x] (match-all x (List Char) [<cons char-pat $next> next]))))

(define $peg-or (lambda [$p1 $p2] (lambda [$x] {@(p1 x) @(p2 x)})))
(define $peg-concat (lambda [$p1 $p2] (lambda [$x] (concat (map p2 (p1 x))) )))
(define $peg-ast (lambda [$p] (lambda [$x] {x @((peg-concat p (peg-ast p)) x)} )))
(define $peg-plus (lambda [$p] (peg-concat p (peg-ast p)) ))


;; numchar-pat = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
(define $numchar-pat (| ,'0' ,'1' ,'2' ,'3' ,'4' ,'5' ,'6' ,'7' ,'8' ,'9'))
;; num-plus = numchar-pat
(define $num-plus (peg-plus (char-str numchar-pat)))
;; parexpr = '[' expr ']'
(define $parexpr (peg-concat (peg-concat (char-str ,'[') expr) (char-str ,']')))
;; value = num-plus | parexpr
(define $value (peg-or num-plus parexpr))
;; prod = value (('*' | '/') value)*
(define $prod (peg-concat value (peg-ast (peg-concat (peg-or (char-str ,'*') (char-str ,'/')) value))))
;; sum = prod (('+' | '-') prod)*
(define $sum (peg-concat prod (peg-ast (peg-concat (peg-or (char-str ,'+') (char-str ,'-')) prod))))
;; expr = sum | '-' sum
(define $expr (peg-or sum (peg-concat (char-str ,'-') sum)))

;; (test (expr (string-to-chars "12E")))
;; (test (expr (string-to-chars "1-2E")))
;; (test (expr (string-to-chars "-12E")))
;; (test (expr (string-to-chars "1+2-3-4E")))
;; (test (expr (string-to-chars "1+2-3*4E")))
;; (test (expr (string-to-chars "1+-2E")))
;; (test (expr (string-to-chars "[12]+3*4E")))
;; (test (expr (string-to-chars "-[12]+3*4E")))
;; (test (expr (string-to-chars "-[12]+3*4/6E")))

(define $repeat (lambda [$i $l] (if (lt-n? i 0) {} {@l @(repeat (- i 1) l)} )))
(define $longtestdata (lambda [$n] {'[' @(repeat n (string-to-chars "12+3*")) @(string-to-chars "4]+1")}))

;; (test (expr (longtestdata 300)))
