(define $f (lambda [$x $y] (+ x y)))

(test (f 2 3))

(test (if #t 1 2))

(test (if #f 1 2))


(define $t [1 2])

(test (let {[[$x $y] t]} (+ x y)))


(test (match-all 1 Something [$x x]))

(test (match-all <less> Order [<less> <ok>]))

(test (match-all <less> Order [,<less> <ok>]))


(test (letrec {[$fact (lambda [$n] (if (eq? n 0)
                                       1
                                       (* n (fact (- n 1)))))]}
        (fact 3)))


(test (loop $l $i {1 2 3} {i @l} {}))


(test (match-all {1 2 3} (Multiset Integer) [<cons $x $xs> [x xs]]))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons <true> ^<cons <true> _>> #t]
       [_ #f]})))

(define $aList {{<true> <false>} {<false> <true>} {<true> <true>}})

(test (filter f aList))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons <true> ^<cons <true> _>> #t]
       [_ #f]})))

(define $aList {{<true> <false>} {<false> <true>} {<true> <true>}})

(test (filter f aList))


(define $f
  (lambda [$x]
    (match x Integer
      {[,10 #t]
       [_ #f]})))

(define $xs {1 2 10 10 3})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Integer)
      {[<cons ,10 _> #t]
       [_ #f]})))

(define $xs {{1 2 10 10 3} {3 2} {1 10}})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,<true> _> #t]
       [_ #f]})))

(define $xs {{#t #f} {#f} {#t}})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,<true> _> #f]
       [_ #t]})))

(define $xs {{<true> <false>} {<false>} {<true>}})

(test (filter f xs))



(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,#t _> #t]
       [_ #f]})))

(define $xs {{<true>}})

(test (filter f xs))


(test (let {[$p <cons ,1 _>]}
        (match {2 3 1 2} (Multiset Integer)
          {[p <ok>]
           [_ <ko>]})))

(test (match {2 3 1 2} (Multiset Integer)
        {[p <ok>]
         [_ <ko>]}))

(test (match-all 10 Nat [<s $n> n]))
