(define $f (lambda [$x $y] (+ x y)))

(test (f 2 3))


(test (if #t 1 2))

(test (if #f 1 2))


(define $t [1 2])

(test (let {[[$x $y] t]} (+ x y)))


(test (letrec {[$f (lambda [$x] (+ g x))] [$g 10]} (f 1)))


(define $t (type {[$x 2] [$f (lambda [$x] (g x))] [$g (lambda [$y] (+ x y))]}))

(test (type-ref t x))

(test ((type-ref t f) 10))

(test (match-all 1 Something [$x x]))


(test (match-all <less> Order [<less> <ok>]))

(test ((type-ref Order equal?) <less> <less>))

(test ((type-ref Order equal?) <less> <greater>))

(test (match-all <less> Order [,<less> <ok>]))


(test (letrec {[$fact (lambda [$n] (if (eq? n 0)
                                       1
                                       (* n (fact (- n 1)))))]}
        (fact 3)))


(test (loop $l $i {1 2 3} {i @l} {}))


(test (match-all {1 2 3} (Multiset Integer)
        [<snoc $x $xs> [x xs]]))

(test (match-all {1 2 3 4 5 6 7 1 3 5 7} (Multiset Integer)
        [<cons $x ^<cons ,x _>> x]))

(test (match-all {{1 2 3} {2 3 4} {1}} (Multiset (Multiset Integer))
        [<cons <cons $x ^<cons ,x _>>
          <cons ^<cons ,x _>
           <cons ^<cons ,x _>
            <nil>>>>
         x]))

(test (match-all {{1 2 3} {2 3 4}} (Multiset (Multiset Integer))
        [<cons <cons $x ^<cons ,x _>>
           <cons ^<cons ,x _>
            <nil>>>
         x]))

(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons <true> ^<cons <true> _>> #t]
       [_ #f]})))

(define $aList {{<true> <false>} {<false> <true>} {<true> <true>}})

(test (filter f aList))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons <true> ^<cons <true> _>> #t]
       [_ #f]})))

(define $aList {{<true> <false>} {<false> <true>} {<true> <true>}})

(test (filter f aList))


(define $f
  (lambda [$x]
    (match x Integer
      {[,10 #t]
       [_ #f]})))

(define $xs {1 2 10 10 3})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Integer)
      {[<cons ,10 _> #t]
       [_ #f]})))

(define $xs {{1 2 10 10 3} {3 2} {1 10}})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,<true> _> #t]
       [_ #f]})))

(define $xs {{#t #f} {#f} {#t}})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,<true> _> #f]
       [_ #t]})))

(define $xs {{<true> <false>} {<false>} {<true>}})

(test (filter f xs))



(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,#t _> #t]
       [_ #f]})))

(define $xs {{<true>}})

(test (filter f xs))


(define $fact-sum
  (lambda [$n]
    (if (eq? n 0)
        1
        (+ n (fact-sum (- n 1))))))

(define $fact
  (lambda [$n]
    (if (eq? n 0)
        1
        (* n (fact (- n 1))))))


(define $fact
  (lambda [$n]
    (match n Integer
      {[,0 1]
       [_ (* n (fact (- n 1)))]})))


(define $p <cons ,1 _>)

(test (match {2 3 1 2} (Multiset Integer)
        {[p <ok>]
         [_ <ko>]}))


(test (let {[$p <cons ,1 _>]}
        (match {2 3 1 2} (Multiset Integer)
          {[p <ok>]
           [_ <ko>]})))

(test (match {2 3 1 2} (Multiset Integer)
        {[p <ok>]
         [_ <ko>]}))

(test (match-all 10 Nat [<s $n> n]))

(define $all-paths
  (lambda [$g $s $e]
    (let {[$n (size g)]}
      (match-all g Graph
        [(| <cons <node ,s <cons ,e _> _> $rest>
            <cons <node ,s <cons $a_2 _> _>
                  (loop $l $i (between 3 (- n 1))
                        (| <cons <node ,a_(- i 1) <cons ,e _> _> $rest>
                           <cons <node ,a_(- i 1) <cons $a_i _> _> l>)
                        <cons <node ,a_(- n 1) <cons ,e _> $rest>>)>)
         [{s @(loop $l $i (between 2 (- n (size rest))) {a_i @l} {e})}]]))))

(define $seven-queen
  (match-all {1 2 3 4 5 6 7} (Multiset Integer)
    [<cons $a_1
      <cons (& ^,(- a_1 1)
               ^,(+ a_1 1)
               $a_2)
       <cons (& ^,(- a_1 2)
                ^,(- a_2 1)
                ^,(+ a_1 2)
                ^,(+ a_2 1)
                ,3
                $a_3)
         <cons (& ^,(- a_1 3)
                  ^,(- a_2 2)
                  ^,(- a_3 1)
                  ^,(+ a_1 3)
                  ^,(+ a_2 2)
                  ^,(+ a_3 1)
                  ,5
                  $a_4)
           <cons (& ^,(- a_1 4)
                    ^,(- a_2 3)
                    ^,(- a_3 2)
                    ^,(- a_4 1)
                    ^,(+ a_1 4)
                    ^,(+ a_2 3)
                    ^,(+ a_3 2)
                    ^,(+ a_4 1)
                    $a_5)
            <cons (& ^,(- a_1 5)
                     ^,(- a_2 4)
                     ^,(- a_3 3)
                     ^,(- a_4 2)
                     ^,(- a_5 1)
                      ^,(+ a_1 5)
                      ^,(+ a_2 4)
                      ^,(+ a_3 3)
                      ^,(+ a_4 2)
                      ^,(+ a_5 1)
                     $a_6)
             <cons (& ^,(- a_1 6)
                      ^,(- a_2 5)
                      ^,(- a_3 4)
                      ^,(- a_4 3)
                      ^,(- a_5 2)
                      ^,(- a_6 1)
                      ^,(+ a_1 6)
                      ^,(+ a_2 5)
                      ^,(+ a_3 4)
                      ^,(+ a_4 3)
                      ^,(+ a_5 2)
                      ^,(+ a_6 1)
                      $a_7)
              <nil>>>>>>>>
     [a_1 a_2 a_3 a_4 a_5 a_6 a_7]]))


(define $seven-queen
  (match-all {1 2 3 4 5 6 7} (Multiset Integer)
    [<cons $a_1
      <cons (& ^,(- a_1 1)
               ^,(+ a_1 1)
               $a_2)
       <cons (& ^,(- a_1 2)
                ^,(- a_2 1)
                ^,(+ a_1 2)
                ^,(+ a_2 1)
                $a_3)
         <cons (& ^,(- a_1 3)
                  ^,(- a_2 2)
                  ^,(- a_3 1)
                  ^,(+ a_1 3)
                  ^,(+ a_2 2)
                  ^,(+ a_3 1)
                  $a_4)
           <cons (& ^,(- a_1 4)
                    ^,(- a_2 3)
                    ^,(- a_3 2)
                    ^,(- a_4 1)
                    ^,(+ a_1 4)
                    ^,(+ a_2 3)
                    ^,(+ a_3 2)
                    ^,(+ a_4 1)
                    $a_5)
            <cons (& ^,(- a_1 5)
                     ^,(- a_2 4)
                     ^,(- a_3 3)
                     ^,(- a_4 2)
                     ^,(- a_5 1)
                      ^,(+ a_1 5)
                      ^,(+ a_2 4)
                      ^,(+ a_3 3)
                      ^,(+ a_4 2)
                      ^,(+ a_5 1)
                     $a_6)
             <cons (& ^,(- a_1 6)
                      ^,(- a_2 5)
                      ^,(- a_3 4)
                      ^,(- a_4 3)
                      ^,(- a_5 2)
                      ^,(- a_6 1)
                      ^,(+ a_1 6)
                      ^,(+ a_2 5)
                      ^,(+ a_3 4)
                      ^,(+ a_4 3)
                      ^,(+ a_5 2)
                      ^,(+ a_6 1)
                      $a_7)
              <nil>>>>>>>>
     [a_1 a_2 a_3 a_4 a_5 a_6 a_7]]))


(define $seven-queen
  (match-all {1 2 3 4 5 6 7} (Multiset Integer)
    [<cons $a_1
      (loop $l $i (between 2 7)
            <cons (loop $l1 $i1 (between 1 (- i 1))
                        (& ^,(- a_i1 (- i i1))
                           ^,(+ a_i1 (- i i1))
                           l1)
                        $a_i)
                  l>
            <nil>)>
     [@(loop $l $i (between 1 7)  {a_i @l} {})]]))


(define $n-queen
  (lambda [$n]
    (match-all (between 1 n) (Multiset Integer)
      [<cons $a_1
             (loop $l $i (between 2 n)
                   <cons (loop $l1 $i1 (between 1 (- i 1))
                               (& ^,(- a_i1 (- i i1))
                                  ^,(+ a_i1 (- i i1))
                                  l1)
                               $a_i)
                         l>
                   <nil>)>
       [@(loop $l $i (between 1 n)  {a_i @l} {})]])))

(test (n-queen 8))


(define $eight-queen
  (match-all {1 2 3 4 5 6 7 8} (Multiset Integer)
    [<cons $a_1
      <cons (& ^,(- a_1 1)
               ^,(+ a_1 1)
               $a_2)
       <cons (& ^,(- a_1 2)
                ^,(- a_2 1)
                ^,(+ a_1 2)
                ^,(+ a_2 1)
                $a_3)
        <cons (& ^,(- a_1 3)
                 ^,(- a_2 2)
                 ^,(- a_3 1)
                 ^,(+ a_1 3)
                 ^,(+ a_2 2)
                 ^,(+ a_3 1)
                 $a_4)
          <cons (& ^,(- a_1 4)
                   ^,(- a_2 3)
                   ^,(- a_3 2)
                   ^,(- a_4 1)
                   ^,(+ a_1 4)
                   ^,(+ a_2 3)
                   ^,(+ a_3 2)
                   ^,(+ a_4 1)
                   $a_5)
           <cons (& ^,(- a_1 5)
                    ^,(- a_2 4)
                    ^,(- a_3 3)
                    ^,(- a_4 2)
                    ^,(- a_5 1)
                     ^,(+ a_1 5)
                     ^,(+ a_2 4)
                     ^,(+ a_3 3)
                     ^,(+ a_4 2)
                     ^,(+ a_5 1)
                    $a_6)
            <cons (& ^,(- a_1 6)
                     ^,(- a_2 5)
                     ^,(- a_3 4)
                     ^,(- a_4 3)
                     ^,(- a_5 2)
                     ^,(- a_6 1)
                     ^,(+ a_1 6)
                     ^,(+ a_2 5)
                     ^,(+ a_3 4)
                     ^,(+ a_4 3)
                     ^,(+ a_5 2)
                     ^,(+ a_6 1)
                     $a_7)
             <cons (& ^,(- a_1 7)
                      ^,(- a_2 6)
                      ^,(- a_3 5)
                      ^,(- a_4 4)
                      ^,(- a_5 3)
                      ^,(- a_6 2)
                      ^,(- a_7 1)
                      ^,(+ a_1 7)
                      ^,(+ a_2 6)
                      ^,(+ a_3 5)
                      ^,(+ a_4 4)
                      ^,(+ a_5 3)
                      ^,(+ a_6 2)
                      ^,(+ a_7 1)
                      $a_8)
              <nil>>>>>>>>>
     [a_1 a_2 a_3 a_4 a_5 a_6 a_7 a_8]]))


(test (match-all {[1 2] [1 2]} (List [Integer Integer])
        [<cons [$a $b] _> [a b]]))