(match-all {1 2 3} (List Integer)
  [<cons $x $xs> [x xs]])

-> {[1 {2 3}]}

(match-all {1 2 3} (Multiset Integer)
  [<cons $x $xs> [x xs]])

-> {[1 {2 3}] [2 {1 3}] [3 {1 2}]}

(match-all {1 2 3} (Set Integer)
  [<cons $x $xs> [x xs]])

-> {[1 {2 3}] [2 {1 3}] [3 {1 2}]
    [1 {2 3 1}] [2 {1 3 2}] [3 {1 2 3}]}



(match-all {2 8 7 2 7} (Multiset Integer)
  [<cons $x <cons ,x _>> x])

-> {2 7}




(match-all {3 4 2 1 5 6} (Multiset Integer)
  [<cons $x
    <cons ,(- x 1)
     <cons ,(- x 2)
      <cons ,(- x 3)
       _>>>>
   x])

-> {4 5 6}



(match-all {1 2 1 4 2 1} (Multiset Integer)
  [<cons $x ^<cons ,x _>> x])
-> {4}


(loop $l $i {1 2 3} <cons $a_i l> _)
-> <cons $a_1 <cons $a_2 <cons $a_3 _>>>


(loop $l $i (between 1 n) <cons $a_i l> _)
-> <cons $a_1 <cons $a_2 ... <cons $a_n _>...>>

(define $four-queen
  (match-all {1 2 3 4} (Multiset Integer)
    [<cons $a_1
      <cons (& ^,(- a_1 1) ^,(+ a_1 1)
               $a_2)
       <cons (& ^,(- a_1 2) ^,(+ a_1 2)
                ^,(- a_2 1) ^,(+ a_2 1)
                $a_3)
        <cons (& ^,(- a_1 3) ^,(+ a_1 3)
                 ^,(- a_2 2) ^,(+ a_2 2)
                 ^,(- a_3 1) ^,(+ a_3 1)
                 $a_4)
         <nil>>>>>
     [a_1 a_2 a_3 a_4]]))

-> {[2 4 1 3] [3 1 4 2]}


(define $four-queen
  (match-all {1 2 3 4} (Multiset Integer)
    [<cons $a_1
           (loop $l $i {2 3 4}
                 <cons (loop $l1 $i1 (between 1 (- i 1))
                             (& ^,(- a_i1 (- i i1))
                                ^,(+ a_i1 (- i i1))
                                l1)
                             $a_i)
                       l>
                 <nil>)>
     [a_1 a_2 a_3 a_4]]))



(define $n-queen
  (lambda [$n]
    (match-all (between 1 n) (Multiset Integer)
      [<cons $a_1
             (loop $l $i (between 2 n)
                   <cons (loop $l1 $i1 (between 1 (- i 1))
                               (& ^,(- a_i1 (- i i1))
                                  ^,(+ a_i1 (- i i1))
                                  l1)
                               $a_i)
                         l>
                   <nil>)>
       [@(loop $l $i (between 1 n)  {a_i @l} {})]])))




(define $junshi
  (macro [$s $pat]
    <cons $`s <cons ,(+ `s 1) <cons ,(+ `s 2) pat>>>))

(test (match-all {1 3 5 6 2 4} (Multiset Integer)
        [(junshi %m (junshi %n _)) [m n]]))

-> {[1 4] [4 1]}

(define $kokushi
  (macro [$s $pat]
    <cons $`s <cons ,`s <cons ,`s pat>>>))

(test (match-all {1 3 5 5 2 5} (Multiset Integer)
        [(junshi %m (kokushi %n _)) [m n]]))

-> {[1 5]}





(test (match-all {1 1 1} (Multiset Integer)
        [<cons $x $xs> [x xs]]))




(test (match {undefined 2} (List Integer) {[<cons $y $x> x]}))


(define $inf 
(test (match {undefined 2} (List Integer) {[<cons $y $x> x]}))