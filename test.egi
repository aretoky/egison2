(define $f (lambda [$x $y] (+ x y)))

(test (f 2 3))


(test (if #t 1 2))

(test (if #f 1 2))


(define $t [1 2])

(test (let {[[$x $y] t]} (+ x y)))


(test (letrec {[$f (lambda [$x] (+ g x))] [$g 10]} (f 1)))


(define $t (type {[$x 2] [$f (lambda [$x] (g x))] [$g (lambda [$y] (+ x y))]}))

(test (type-ref t x))

(test ((type-ref t f) 10))


(define $Something (type {[$var-match (lambda [$tgt] {tgt})]}))

(test (match-all 1 Something [$x x]))


(define $Order
  (type
    {[$var-match (lambda [$tgt] {tgt})]
     [$inductive-match
      (destructor
        {[less []
          {[<less> {[]}]
           [_ {}]}]
         [equal []
          {[<equal> {[]}]
           [_ {}]}]
         [greater []
          {[<greater> {[]}]
           [_ {}]}]})]
     [$equal?
      (lambda [$val $tgt]
        (match [val tgt] [Order Order]
          {[[<less> <less>] <true>]
           [[<equal> <equal>] <true>]
           [[<greater> <greater>] <true>]
           [[_ _] <false>]}))]}))

(test (match-all <less> Order [<less> <ok>]))