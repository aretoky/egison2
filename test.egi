(define $f (lambda [$x $y] (+ x y)))

(test (f 2 3))


(test (if #t 1 2))

(test (if #f 1 2))


(define $t [1 2])

(test (let {[[$x $y] t]} (+ x y)))


(test (letrec {[$f (lambda [$x] (+ g x))] [$g 10]} (f 1)))


(define $t (type {[$x 2] [$f (lambda [$x] (g x))] [$g (lambda [$y] (+ x y))]}))

(test (type-ref t x))

(test ((type-ref t f) 10))

(test (match-all 1 Something [$x x]))


(test (match-all <less> Order [<less> <ok>]))

(test ((type-ref Order equal?) <less> <less>))

(test ((type-ref Order equal?) <less> <greater>))

(test (match-all <less> Order [,<less> <ok>]))


(test (letrec {[$fact (lambda [$n] (if (eq? n 0)
                                       1
                                       (* n (fact (- n 1)))))]}
        (fact 3)))


(test (loop $l $i {1 2 3} {i @l} {}))


(test (match-all {1 2 3 1} (Multiset Integer)
        [<cons $x ^<cons ,x _>> x]))

(test (match-all {{1 2 3} {2 3 4} {1}} (Multiset (Multiset Integer))
        [<cons <cons $x ^<cons ,x _>>
          <cons ^<cons ,x _>
           <cons ^<cons ,x _>
            <nil>>>>
         x]))

(test (match-all {{1 2 3} {2 3 4}} (Multiset (Multiset Integer))
        [<cons <cons $x ^<cons ,x _>>
           <cons ^<cons ,x _>
            <nil>>>
         x]))

(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons <true> ^<cons <true> _>> #t]
       [_ #f]})))

(define $aList {{<true> <false>} {<false> <true>} {<true> <true>}})

(test (filter f aList))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons <true> ^<cons <true> _>> #t]
       [_ #f]})))

(define $aList {{<true> <false>} {<false> <true>} {<true> <true>}})

(test (filter f aList))


(define $f
  (lambda [$x]
    (match x Integer
      {[,10 #t]
       [_ #f]})))

(define $xs {1 2 10 10 3})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Integer)
      {[<cons ,10 _> #t]
       [_ #f]})))

(define $xs {{1 2 10 10 3} {3 2} {1 10}})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,<true> _> #t]
       [_ #f]})))

(define $xs {{#t #f} {#f} {#t}})

(test (filter f xs))


(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,<true> _> #f]
       [_ #t]})))

(define $xs {{<true> <false>} {<false>} {<true>}})

(test (filter f xs))



(define $f
  (lambda [$x]
    (match x (Multiset Bool)
      {[<cons ,#t _> #t]
       [_ #f]})))

(define $xs {{<true>}})

(test (filter f xs))

